<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jayson Paul</title>
    <link>https://jaysonmpaul.com/</link>
    <description>Recent content on Jayson Paul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jun 2017 20:06:32 -0400</lastBuildDate>
    
	<atom:link href="https://jaysonmpaul.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Glare: Lightweight Replacement for Glance</title>
      <link>https://jaysonmpaul.com/projects/glare/</link>
      <pubDate>Fri, 09 Jun 2017 20:06:32 -0400</pubDate>
      
      <guid>https://jaysonmpaul.com/projects/glare/</guid>
      <description>Glance About a year ago I was tasked with upgrading our Virtual Machine tooling from CentOS 6 to Centos 7. We were using KVM and QEMU for our developer VMs. We had a very lightweight installation of OpenStack Glance for serving our base images used during creation and bootstrap. In true CentOS fashion, the version of glance that shipped with it was very outdated: 2012.1.1.
Not surprisingly, the version that came with CentOS 7 was much newer but still hopelessly out of date: 2015.</description>
    </item>
    
    <item>
      <title>Re-Introducing Deployinator, now as a Gem</title>
      <link>https://jaysonmpaul.com/post/re-introducing-deployinator-as-a-gem/</link>
      <pubDate>Fri, 20 Feb 2015 20:13:29 -0400</pubDate>
      
      <guid>https://jaysonmpaul.com/post/re-introducing-deployinator-as-a-gem/</guid>
      <description>If you aren&amp;rsquo;t familiar with Deployinator, it&amp;rsquo;s a tool we wrote to deploy code to Etsy.com. We deploy code about 40 times per day. This allows us to push smaller changes we are confident about and experiment at a fast rate. Deployinator does a lot of heavy lifting for us. This includes updating source repositories on build machines, minifying/building javascript and css dependencies, kicking off automated tests and updating our staging environment before launching live.</description>
    </item>
    
    <item>
      <title>LXC – Automating Containers aka Virtual Madness (Part 2)</title>
      <link>https://jaysonmpaul.com/post/continuous-integration-at-etsy-2/</link>
      <pubDate>Mon, 23 Sep 2013 20:28:43 -0400</pubDate>
      
      <guid>https://jaysonmpaul.com/post/continuous-integration-at-etsy-2/</guid>
      <description>Presenting Virtual Madness! This is part 2 of our LXC blog post. If you missed the first half you can read it here.
We already have much tooling around making it easy to create a virtual machine for each developer, so it made sense to build our LXC virtualization tools into the same interface.
 As shown above, our main page gives a quick look into all the LXC Containers that are running and the Jenkins instances to which they are attached.</description>
    </item>
    
    <item>
      <title>LXC – Running 14,000 tests per day and beyond! (Part 1)</title>
      <link>https://jaysonmpaul.com/post/continuous-integration-at-etsy-1/</link>
      <pubDate>Mon, 23 Sep 2013 20:26:25 -0400</pubDate>
      
      <guid>https://jaysonmpaul.com/post/continuous-integration-at-etsy-1/</guid>
      <description>Continuous Integration at Etsy As Etsy continues to grow and hire more developers, we have faced the continuous integration scaling challenge of how to execute multiple concurrent test suites without slowing the pace of our deploy queue. With a deployment rate of up to 65 deploys / day and a total of 30 test suites (unit tests, integration tests, functional tests, smokers&amp;hellip;) that run for every deploy, this means running the test suites 1950 times a day.</description>
    </item>
    
  </channel>
</rss>